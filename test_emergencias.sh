#!/bin/bash

# Script de pruebas para el sistema de emergencias
# Aseg√∫rate de que el backend est√© corriendo en http://localhost:8081

BASE_URL="http://localhost:8081"

echo "üö® Iniciando pruebas del Sistema de Emergencias"
echo "================================================"
echo ""

# Colores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# ============================================
# TEST 1: Crear emergencia
# ============================================
echo -e "${YELLOW}TEST 1: Crear emergencia de plomer√≠a${NC}"
echo "-------------------------------------"

EMERGENCY_RESPONSE=$(curl -s -X POST "$BASE_URL/api/emergencias" \
  -H "Content-Type: application/json" \
  -d '{
    "usuarioId": 1,
    "categoriaId": 1,
    "subcategoriaId": 1,
    "descripcion": "Fuga de agua urgente en la cocina",
    "direccion": "Calle Ahumada 123, Santiago",
    "latitud": -33.4489,
    "longitud": -70.6693,
    "telefono": "+56912345678",
    "notas": "Agua saliendo del lavaplatos"
  }')

echo "$EMERGENCY_RESPONSE" | jq '.'

# Extraer ID de la solicitud
SOLICITUD_ID=$(echo "$EMERGENCY_RESPONSE" | jq -r '.data.solicitudId')
echo -e "${GREEN}‚úì Emergencia creada con ID: $SOLICITUD_ID${NC}"
echo ""

# Extraer ID de la primera notificaci√≥n
NOTIFICACION_ID=$(echo "$EMERGENCY_RESPONSE" | jq -r '.data.notificaciones[0].id')
TECNICO_ID=$(echo "$EMERGENCY_RESPONSE" | jq -r '.data.notificaciones[0].tecnicoId')

echo -e "${GREEN}‚úì Notificaci√≥n enviada a t√©cnico $TECNICO_ID (Notificaci√≥n ID: $NOTIFICACION_ID)${NC}"
echo ""
sleep 2

# ============================================
# TEST 2: Ver estado de emergencia
# ============================================
echo -e "${YELLOW}TEST 2: Consultar estado de emergencia${NC}"
echo "-------------------------------------"

curl -s "$BASE_URL/api/emergencias/$SOLICITUD_ID" | jq '.'
echo -e "${GREEN}‚úì Estado obtenido correctamente${NC}"
echo ""
sleep 2

# ============================================
# TEST 3: Ver notificaciones pendientes del t√©cnico
# ============================================
echo -e "${YELLOW}TEST 3: Notificaciones pendientes del t√©cnico${NC}"
echo "-------------------------------------"

curl -s "$BASE_URL/api/emergencias/tecnico/$TECNICO_ID/pendientes" | jq '.'
echo -e "${GREEN}‚úì Notificaciones obtenidas${NC}"
echo ""
sleep 2

# ============================================
# TEST 4: T√©cnico rechaza la emergencia
# ============================================
echo -e "${YELLOW}TEST 4: T√©cnico rechaza la emergencia${NC}"
echo "-------------------------------------"

REJECT_RESPONSE=$(curl -s -X POST "$BASE_URL/api/emergencias/responder" \
  -H "Content-Type: application/json" \
  -d "{
    \"notificacionId\": $NOTIFICACION_ID,
    \"tecnicoId\": $TECNICO_ID,
    \"aceptar\": false,
    \"latitudActual\": -33.4450,
    \"longitudActual\": -70.6650
  }")

echo "$REJECT_RESPONSE" | jq '.'
echo -e "${GREEN}‚úì Emergencia rechazada. Sistema buscando siguiente t√©cnico...${NC}"
echo ""
sleep 3

# ============================================
# TEST 5: Ver estado actualizado
# ============================================
echo -e "${YELLOW}TEST 5: Estado despu√©s del rechazo${NC}"
echo "-------------------------------------"

UPDATED_STATE=$(curl -s "$BASE_URL/api/emergencias/$SOLICITUD_ID")
echo "$UPDATED_STATE" | jq '.'

# Extraer nueva notificaci√≥n (si existe)
NEW_NOTIFICACION_ID=$(echo "$UPDATED_STATE" | jq -r '.data.notificaciones[] | select(.estado == "PENDIENTE") | .id' | head -1)
NEW_TECNICO_ID=$(echo "$UPDATED_STATE" | jq -r '.data.notificaciones[] | select(.estado == "PENDIENTE") | .tecnicoId' | head -1)

if [ ! -z "$NEW_NOTIFICACION_ID" ] && [ "$NEW_NOTIFICACION_ID" != "null" ]; then
    echo -e "${GREEN}‚úì Nuevo t√©cnico contactado (ID: $NEW_TECNICO_ID)${NC}"
    echo ""
    sleep 2

    # ============================================
    # TEST 6: Segundo t√©cnico acepta
    # ============================================
    echo -e "${YELLOW}TEST 6: Segundo t√©cnico acepta la emergencia${NC}"
    echo "-------------------------------------"

    ACCEPT_RESPONSE=$(curl -s -X POST "$BASE_URL/api/emergencias/responder" \
      -H "Content-Type: application/json" \
      -d "{
        \"notificacionId\": $NEW_NOTIFICACION_ID,
        \"tecnicoId\": $NEW_TECNICO_ID,
        \"aceptar\": true,
        \"latitudActual\": -33.4500,
        \"longitudActual\": -70.6700
      }")

    echo "$ACCEPT_RESPONSE" | jq '.'
    echo -e "${GREEN}‚úì ¬°Emergencia aceptada por t√©cnico $NEW_TECNICO_ID!${NC}"
    echo ""
    sleep 2

    # ============================================
    # TEST 7: Estado final con t√©cnico asignado
    # ============================================
    echo -e "${YELLOW}TEST 7: Estado final (t√©cnico asignado)${NC}"
    echo "-------------------------------------"

    curl -s "$BASE_URL/api/emergencias/$SOLICITUD_ID" | jq '.'
    echo -e "${GREEN}‚úì T√©cnico asignado correctamente${NC}"
    echo ""

else
    echo -e "${RED}‚úó No se encontr√≥ segundo t√©cnico. Verifica que haya m√∫ltiples t√©cnicos en la BD.${NC}"
    echo ""
fi

# ============================================
# RESUMEN
# ============================================
echo ""
echo "================================================"
echo -e "${GREEN}‚úÖ PRUEBAS COMPLETADAS${NC}"
echo "================================================"
echo ""
echo "Resumen de flujo probado:"
echo "1. ‚úì Cliente crea emergencia"
echo "2. ‚úì Sistema busca t√©cnicos cercanos"
echo "3. ‚úì Env√≠a notificaci√≥n al t√©cnico m√°s cercano"
echo "4. ‚úì T√©cnico rechaza emergencia"
echo "5. ‚úì Sistema busca siguiente t√©cnico"
echo "6. ‚úì Segundo t√©cnico acepta"
echo "7. ‚úì Cliente recibe confirmaci√≥n con datos del t√©cnico"
echo ""
echo -e "${YELLOW}üìù Notas:${NC}"
echo "- Revisa la BD para ver las notificaciones creadas"
echo "- Los timeouts se verifican autom√°ticamente cada 30 segundos"
echo "- Las coordenadas de prueba son de Santiago Centro"
echo ""
